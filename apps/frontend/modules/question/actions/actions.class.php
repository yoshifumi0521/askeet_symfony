<?php
// auto-generated by sfPropelCrud
// date: 2013/06/19 21:53:31
?>
<?php

/**
 * question actions.
 *
 * @package    askeet
 * @subpackage question
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class questionActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('question', 'list');
  }

  public function executeList()
  {
    // $this->questions = QuestionPeer::doSelect(new Criteria());
    // $pager = new sfPropelPager('Question', 2);

    //ページを分割して表示するために、Questionオブジェクトを分割して取得する。
    // $pager = new sfPropelPager('Question', 2);
    // $c = new Criteria();
    // $c->addDescendingOrderByColumn(QuestionPeer::INTERESTED_USERS);
    // $pager->setCriteria($c);
    // $pager->setPage($this->getRequestParameter('page', 1));
    // $pager->setPeerMethod('doSelectJoinUser');
    // $pager->init();

    // $this->question_pager = $pager;
    //ページ分割のデータを取得。getHomepagePagerメソッドは、QuestionPeerクラスで定義する。
    $this->question_pager = QuestionPeer::getHomepagePager($this->getRequestParameter('page', 1));

    // var_dump($this->question_pager->getPage() );
  }


  public function executeRecent()
  {
    $this->question_pager = QuestionPeer::getRecentPager($this->getRequestParameter('page',1));



  }

  public function executeShow()
  {
    // $this->logMessage("target ".$this->getRequestParameter('stripped_title'));
    $this->question = QuestionPeer::retrieveByPk($this->getRequestParameter('stripped_title'));
    // $this->forward404Unless($this->question);

    //ここをモデルで記述する。
    // $c = new Criteria();
    // $c->add(QuestionPeer::STRIPPED_TITLE, $this->getRequestParameter('stripped_title'));
    // $this->question = QuestionPeer::doSelectOne($c);
    // $this->forward404Unless($this->question);
    $this->question = QuestionPeer::getQuestionFromTitle($this->getRequestParameter('stripped_title'));

    //エラー処理
    $this->forward404Unless($this->question);

  }

  public function executeCreate()
  {
    $this->question = new Question();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->question = QuestionPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->question);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $question = new Question();
    }
    else
    {
      $question = QuestionPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($question);
    }

    $question->setId($this->getRequestParameter('id'));
    $question->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
    $question->setTitle($this->getRequestParameter('title'));
    $question->setBody($this->getRequestParameter('body'));

    $question->save();

    return $this->redirect('question/show?id='.$question->getId());
  }

  public function executeDelete()
  {
    $question = QuestionPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($question);

    $question->delete();

    return $this->redirect('question/list');
  }

  //ユーザーが質問を加えるためのメソッド
  public function executeAdd()
  {

    if($this->getRequest()->getMethod() != sfRequest::POST)
    {
      //GETできた場合
      $this->logMessage("GETできた");




    }
    else
    {
      //POSTできた場合
      $this->logMessage("POSTできた");




    }




  }

  #バリデーションのエラーを起こす。
  public function handleErrorAdd()
  {
    return sfView::SUCCESS;
  }




}
